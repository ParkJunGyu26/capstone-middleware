# github-actions
name: CI/CD Pipeline to EC2

on:
  push:
    branches:
      - develop

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci

      - name: Build and test
        run: npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: parkjungyu26/kau-capstone:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy_to_ec2:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          password: ${{ secrets.AWS_PASSWORD }}
          script: |
            mkdir -p /home/ubuntu/myproject

      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          password: ${{ secrets.AWS_PASSWORD }}
          source: docker-compose.yml
          target: /home/ubuntu/myproject/

      - name: Deploying to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          password: ${{ secrets.AWS_PASSWORD }}
          script: |
            cd /home/ubuntu/myproject

            # .env 파일 생성
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env

            # Docker 시스템 정리
            docker container prune -f
            docker image prune -a -f
            docker volume prune -f
            docker network prune -f

            # 최신 이미지를 풀
            docker pull parkjungyu26/kau-capstone:latest

            # 기존 컨테이너가 있다면 중지하고 제거
            if docker ps -q --filter "name=web"; then
              docker stop web
              docker rm web
            fi

            # docker-compose를 사용하여 새로운 컨테이너 실행
            docker-compose down --remove-orphans
            docker-compose up -d
